/* 

   ad_bs_convert.cpp

   Author: Saroj Rai @ CharichaSoftwares 
   Created On: Wednesday, 16 September 2020.

*/

// %Log:$ //
//

#include "ad_bs_convert.h"

char AD_MONTHS[13][24] =
    {
	" ",
	"January",
	"Febraury",
	"March",
	"April",
	"May",
	"June",
	"July",
	"August",
	"September",
	"October",
	"November",
	"December"
    };

char BS_MONTHS[13][24] =
    {
	" ",
	"Baishakh",
	"Jestha",
	"Ashadh",
	"Shrawan",
	"Bhadra",
	"Ashwin",
	"Kartik",
	"Mangsir",
	"Poush",
	"Magh",
	"Falgun",
	"Chaitra"
    };

char DAYS[8][24] =
    {
	"Hallo", 
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday"
    };

int BS[100][13] =
    {
	{2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31},
	{2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
	{2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
	{2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
	{2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
	{2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
	{2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30},
	{2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31},
	{2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
	{2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
	{2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
	{2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
	{2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
	{2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
	{2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30},
	{2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31},
	{2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31},
	{2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30},
	{2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30},
	{2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31},
	{2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
	{2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
	{2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31},
	{2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30},
	{2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30},
	{2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30},
	{2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30},
	{2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30},
	{2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30},
	{2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30},
	{2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30},
	{2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30},
	{2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30},
	{2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30},
	{2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30},
	{2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30}, 
    };


int AD_month[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int AD_lmonth[] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

int is_leap_year(int y){
    if (((y % 4 == 0) && (y % 100 != 0)) || (y%400 == 0)) return 1;
    return 0;
}

int count_ad_to_bs_leap = 0;
int* ad_to_bs(int year, int month, int day){
    if(year < AD_MIN || year > AD_MAX) return nullptr;

    int ad_yearinit = 1944;
    int td = 0;			// total_days passed
    int* month_days = nullptr;

    for(int y = ad_yearinit; y < year; y++){
	month_days = is_leap_year(y) ? AD_lmonth : AD_month;
	for(int i = 1; i <= 12; i++)
	    td += month_days[i];
    }

    month_days = is_leap_year(year) ? AD_lmonth : AD_month;

    for(int i = 1; i < month; i++)
	td += month_days[i];

    td += (day - 1);		

    int nep_year_index = 0;
    int nep_month = 9;
    int nep_day = 17;
    int weekday = 7;		// sunday, monday

    while(td != 0){
	nep_day++;

	weekday++;
	if(weekday > 7)
	    weekday = 1;

	if(nep_day > BS[nep_year_index][nep_month]) {
	    nep_month++;
	    nep_day = 1;
	    if(nep_month > 12){
		nep_year_index++;
		nep_month = 1;
	    }
	}

	td--;
    }
    int nep_year = BS[nep_year_index][0];

    // TODO: Returning a pointer which you've allocated is bad thing
    // Change this is as soon as possible!
    int* res = (int*) malloc(sizeof(int) * 4);
    res[0] = nep_year;
    res[1] = nep_month;
    res[2] = nep_day;
    res[3] = weekday;
    return res;
}

int* bs_to_ad(int year, int month, int day){
    if(year < BS_MIN || year > BS_MAX) return nullptr;

    int td = 0;
    int ty = year - BS[0][0];
    for(int j = 0; j < ty; j++){
	for(int i = 1; i <= 12; i++){ 
	    td += BS[j][i];
	}
    }

    for(int i = 1; i < month; i++) {
	td += BS[ty][i];
    }

    // NOTE: Fact that the current day to be convert isn't counted as passed
    td += (day - 1);

    int eng_year = 1943;
    int eng_month = 4;
    int eng_day = 14;
    int tmp_mdays = 0;
    int week_day = 4;

    while( td != 0){
	eng_day++;

	week_day++;
	if(week_day > 7)
	    week_day = 1;

	tmp_mdays = is_leap_year(eng_year) ? AD_lmonth[eng_month] : AD_month[eng_month];
	if(eng_day > tmp_mdays){
	    eng_month++;
	    eng_day = 1;

	    if(eng_month > 12){
		eng_year++;
		eng_month = 1;
	    }
	}

	td--;
    }

    // TODO: Returning a pointer which you've allocated is bad thing
    // Change this is as soon as possible!
    int* res = (int*) malloc(sizeof(int) * 4);
    res[0] = eng_year;
    res[1] = eng_month;
    res[2] = eng_day;
    res[3] = week_day;
    return res;
}


int get_max_ad_day(int year, int month){
    if(month < 1 || month > 12) return -1;
    return is_leap_year(year) ? AD_month[month] : AD_lmonth[month];
}

int get_max_bs_day(int year, int month){
    if(month < 1 || month > 12) return -1;
    if(year < BS_MIN || year > BS_MAX) return -1;
    printf("%d %d\n", year, month);
    return BS[year-BS_MIN][month];
}




const char* ad_month_name(int month){
    if(month < 1 || month > 12) return "Month";
    return AD_MONTHS[month];
}

const char* bs_month_name(int month){
    if(month < 1 || month > 12) return "Month";
    return BS_MONTHS[month];
}

const char* get_day_name(int day){
    if(day < 1 || day > 7) return "Day";
    return DAYS[day];
}
